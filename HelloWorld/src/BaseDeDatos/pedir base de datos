En postgresql hacer cuatro tablas, la primera es la tabla alumno con los campos: un id de llave primaria tipo uuid autogenerado por postgresql, matricula, nombre, apellido paterno, apellido materno, fecha de nacimiento, tipo de sangre, CURP, genero, fecha de alta (que se llene cuando se dá de alta el registro), activo (sí o no), fecha de baja.
La segunda tabla para materias, con los campos: un id de llave primaria tipo uuid autogenerado por postgresql, clave de materia, nombre de materia, descripción de materia, nivel de escolaridad (preescolar, primaria, secundaria, preparatoria), grado de escolaridad.
La tercera tabla para calificaciones, esta tabla es para unir alumnos con materias: debe tener su propio id de tipo uuid, con las llaves foraneas de alumno, llave foranea de materias, incluir calificacion parcial (numero con decimales), periodo, nombre del parcial, fecha del parcial.
La tercera tabla es para calificaciones finales: debe tener su propio id tipo uuid, con las llaves foraneas de alumno, llave foranea de materias, la calificacion de la materia (numero con decimales), periodo.

-- Crear la extensión para UUIDs si no está ya instalada
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Crear tabla de alumnos
CREATE TABLE alumno (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    matricula VARCHAR(20) NOT NULL,
    nombre VARCHAR(50) NOT NULL,
    apellido_paterno VARCHAR(50) NOT NULL,
    apellido_materno VARCHAR(50),
    fecha_nacimiento DATE NOT NULL,
    tipo_sangre VARCHAR(3),
    curp VARCHAR(18) UNIQUE,
    genero VARCHAR(10),
    fecha_alta TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE,
    fecha_baja TIMESTAMP
);

-- Crear tabla de materias
CREATE TABLE materia (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    clave_materia VARCHAR(20) NOT NULL,
    nombre_materia VARCHAR(100) NOT NULL,
    descripcion_materia TEXT,
    nivel_escolaridad VARCHAR(20) NOT NULL CHECK (nivel_escolaridad IN ('preescolar', 'primaria', 'secundaria', 'preparatoria')),
    grado_escolaridad VARCHAR(20) NOT NULL
);

-- Crear tabla de calificaciones parciales
CREATE TABLE calificacion_parcial (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    alumno_id UUID NOT NULL,
    materia_id UUID NOT NULL,
    calificacion_parcial DECIMAL(5,2) NOT NULL,
    periodo VARCHAR(20) NOT NULL,
    nombre_parcial VARCHAR(50) NOT NULL,
    fecha_parcial DATE NOT NULL,
    FOREIGN KEY (alumno_id) REFERENCES alumno(id) ON DELETE CASCADE,
    FOREIGN KEY (materia_id) REFERENCES materia(id) ON DELETE CASCADE
);

-- Crear tabla de calificaciones finales
CREATE TABLE calificacion_final (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    alumno_id UUID NOT NULL,
    materia_id UUID NOT NULL,
    calificacion DECIMAL(5,2) NOT NULL,
    periodo VARCHAR(20) NOT NULL,
    FOREIGN KEY (alumno_id) REFERENCES alumno(id) ON DELETE CASCADE,
    FOREIGN KEY (materia_id) REFERENCES materia(id) ON DELETE CASCADE
);

Hacer el código sql para postgresql para insertar las materias: nombre_materia: Matemáticas 4, nivel_escolaridad: "primaria", grado_escolaridad: "4", clave_materia: se genera por primeras 4 letras de "nombre_materia" concatenando las primeras 3 letras de "nivel_escolaridad" concatenando "grado_escolaridad" con un separador entre ellas de "-"

INSERT INTO materia (id, clave_materia, nombre_materia, descripcion_materia, nivel_escolaridad, grado_escolaridad)
VALUES
    (
        uuid_generate_v4(),
        CONCAT(SUBSTRING('Matemáticas 4' FROM 1 FOR 4), '-', SUBSTRING('primaria' FROM 1 FOR 3), '-', '4'),
        'Matemáticas',
        'Esta materia es para explicar las bases aritmeticas con divisiones de 2 digitos notaciones desarrolladas complejas',
        'primaria',
        '4'
    ),
    (
        uuid_generate_v4(),
        CONCAT(SUBSTRING('Ciencias 4' FROM 1 FOR 4), '-', SUBSTRING('primaria' FROM 1 FOR 3), '-', '4'),
        'Ciencias',
        'En ciencias de la vida, se ve la clasificación de seres vivos',
        'primaria',
        '4'
    ),
    (
        uuid_generate_v4(),
        CONCAT(SUBSTRING('Historia 4' FROM 1 FOR 4), '-', SUBSTRING('primaria' FROM 1 FOR 3), '-', '4'),
        'Historia',
        'En esta materia y periodo se ve el primer detalle de la historia de México',
        'primaria',
        '4'
    );

    -- Insertar las materias adicionales en la tabla materia
INSERT INTO materia (id, clave_materia, nombre_materia, descripcion_materia, nivel_escolaridad, grado_escolaridad)
VALUES
    (
        uuid_generate_v4(),
        CONCAT(SUBSTRING('Español 5' FROM 1 FOR 4), '-', SUBSTRING('primaria' FROM 1 FOR 3), '-', '4'),
        'Español',
        'En esta materia se practicarán la gramática y ortografía de español.',
        'primaria',
        '4'
    ),
    (
        uuid_generate_v4(),
        CONCAT(SUBSTRING('Geografía 6' FROM 1 FOR 4), '-', SUBSTRING('primaria' FROM 1 FOR 3), '-', '4'),
        'Geografía',
        'Se estudia el territorio mexicano, ecosistemas, ',
        'primaria',
        '4'
    ),
    (
        uuid_generate_v4(),
        CONCAT(SUBSTRING('Biología 1' FROM 1 FOR 4), '-', SUBSTRING('secundaria' FROM 1 FOR 3), '-', '4'),
        'Biología',
        NULL,
        'primaria',
        '4'
    );

-- Insertar 5 alumnos en la tabla alumno
INSERT INTO alumno (id, matricula, nombre, apellido_paterno, apellido_materno, fecha_nacimiento, tipo_sangre, curp, genero, fecha_alta, activo, fecha_baja)
VALUES
    (
        uuid_generate_v4(),
        'A2013001',
        'Juan',
        'Pérez',
        'López',
        '2013-05-10',
        'O+',
        'PEJX131010HDFLRN09',
        'Masculino',
        CURRENT_TIMESTAMP,
        TRUE,
        NULL
    ),
    (
        uuid_generate_v4(),
        'A2013002',
        'María',
        'García',
        'Hernández',
        '2013-08-15',
        'A-',
        'GAHM131015MDFLRN01',
        'Femenino',
        CURRENT_TIMESTAMP,
        TRUE,
        NULL
    ),
    (
        uuid_generate_v4(),
        'A2013003',
        'Carlos',
        'Martínez',
        'Rodríguez',
        '2013-12-22',
        'B+',
        'MARC131222HDFLRN02',
        'Masculino',
        CURRENT_TIMESTAMP,
        TRUE,
        NULL
    ),
    (
        uuid_generate_v4(),
        'A2013004',
        'Lucía',
        'Sánchez',
        'Fernández',
        '2013-02-03',
        'AB+',
        'SALF130203MDFLRN03',
        'Femenino',
        CURRENT_TIMESTAMP,
        TRUE,
        NULL
    ),
    (
        uuid_generate_v4(),
        'A2013005',
        'Pedro',
        'Ramírez',
        'Gómez',
        '2013-07-18',
        'O-',
        'RAGP130718HDFLRN04',
        'Masculino',
        CURRENT_TIMESTAMP,
        TRUE,
        NULL
    );


--Queries practica SELECT
SELECT * FROM alumno;
SELECT id, nombre, apellido_paterno, apellido_materno, activo FROM alumno;

SELECT nombre, apellido_paterno genero, fecha_nacimiento, tipo_sangre FROM alumno
	WHERE apellido_paterno ilike '%ez'
	and fecha_nacimiento BETWEEN '2013-07-01' AND '2013-12-31'
	OR tipo_sangre = 'AB+';

SELECT nombre, apellido_materno genero, fecha_nacimiento, tipo_sangre FROM alumno
	WHERE apellido_materno ilike '%e_';

SELECT nombre, apellido_materno genero, fecha_nacimiento, tipo_sangre, activo FROM alumno
	WHERE activo = TRUE;

--Insert Calificacion_parcial y select JOIN calificacion_parcial con materia y alumno
INSERT INTO calificacion_parcial (alumno_id,materia_id,calificacion_parcial,periodo,nombre_parcial,fecha_parcial) 
VALUES (
	'40b7e6e2-479a-432b-ac3f-e65505da0370',
	'80f748b6-f05a-4339-8836-a68148533cbf',
	8.5,
	'2023-2024',
	'1er. Bimestre',
	'2023-10-05'
)

INSERT INTO calificacion_parcial (alumno_id,materia_id,calificacion_parcial,periodo,nombre_parcial,fecha_parcial) 
	VALUES (
	'0f33073d-6ee0-45d2-ac07-aed1cd4f2401',--remplazar por ID de pedro
	'13f8256a-9a5e-432d-becd-92b7bb271cd1',--reemplazar por ID de una materia
	7,
	'2023-2024',
	'1er Bimestre',
	'2023-10-05'
	),
	(
	'0f33073d-6ee0-45d2-ac07-aed1cd4f2401',--remplazar por ID de pedro
	'6d7ad9c3-72cc-41fb-9eb9-cf37c31a5071',--reemplazar por ID de una otra materia
	8.5,
	'2023-2024',
	'1er Bimestre',
	'2023-10-05'
	);

SELECT a.nombre, a.apellido_paterno, a.apellido_materno, m.nombre_materia,
	cp.calificacion_parcial, cp.nombre_parcial
	FROM calificacion_parcial cp
	JOIN alumno a ON cp.alumno_id = a.id
	JOIN materia m ON cp.materia_id = m.id ;